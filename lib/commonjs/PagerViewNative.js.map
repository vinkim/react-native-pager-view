{"version":3,"sources":["PagerViewNative.tsx"],"names":["VIEW_MANAGER_NAME","PagerViewViewManager","getViewManagerConfig","viewManagerName","UIManager"],"mappings":";;;;;;;;AAAA;;AAWA,MAAMA,iBAAiB,GAAG,cAA1B;AAwCO,MAAMC,oBAAoB,GAAG,yCAClCD,iBADkC,CAA7B;;;AAIA,SAASE,oBAAT,CAA8BC,eAAe,GAAGH,iBAAhD,EAAmE;AACxE,SAAOI,uBAAUF,oBAAV,CAA+BC,eAA/B,CAAP;AACD","sourcesContent":["import { requireNativeComponent, UIManager } from 'react-native';\r\nimport type { GestureResponderEvent, StyleProp, ViewStyle } from 'react-native';\r\nimport type {\r\n  Orientation,\r\n  OverScrollMode,\r\n  PagerViewOnPageScrollEvent,\r\n  PagerViewOnPageSelectedEvent,\r\n  PageScrollStateChangedNativeEvent,\r\n  TransitionStyle,\r\n} from './types';\r\n\r\nconst VIEW_MANAGER_NAME = 'RNCViewPager';\r\n\r\ntype PagerViewNativeProps = {\r\n  /**\r\n   * Total number of pages. When lazy rendering, number of rendered react\r\n   * children elements will be smaller.\r\n   */\r\n  count: number;\r\n  offscreenPageLimit?: number;\r\n\r\n  /**\r\n   * Page position offset of the first rendered react child. I.e., the first\r\n   * `offset` number of pages are not currently rendered on JS-side (so native\r\n   * code should act accordingly).\r\n   */\r\n  offset: number;\r\n\r\n  /**\r\n   * If a parent `View` wants to prevent a child `View` from becoming responder\r\n   * on a move, it should have this handler which returns `true`.\r\n   *\r\n   * `View.props.onMoveShouldSetResponderCapture: (event) => [true | false]`,\r\n   * where `event` is a synthetic touch event as described above.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/view.html#onMoveShouldsetrespondercapture\r\n   */\r\n  onMoveShouldSetResponderCapture: (event: GestureResponderEvent) => boolean;\r\n  onPageScroll: (event: PagerViewOnPageScrollEvent) => void;\r\n  onPageScrollStateChanged: (event: PageScrollStateChangedNativeEvent) => void;\r\n  onPageSelected: (event: PagerViewOnPageSelectedEvent) => void;\r\n  orientation?: Orientation;\r\n  overdrag?: boolean;\r\n  overScrollMode?: OverScrollMode;\r\n  pageMargin?: number;\r\n  scrollEnabled?: boolean;\r\n  showPageIndicator?: boolean;\r\n  style: StyleProp<ViewStyle>;\r\n  transitionStyle?: TransitionStyle;\r\n};\r\n\r\nexport const PagerViewViewManager = requireNativeComponent<PagerViewNativeProps>(\r\n  VIEW_MANAGER_NAME\r\n);\r\n\r\nexport function getViewManagerConfig(viewManagerName = VIEW_MANAGER_NAME) {\r\n  return UIManager.getViewManagerConfig(viewManagerName);\r\n}\r\n"]}