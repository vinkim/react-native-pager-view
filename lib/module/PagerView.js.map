{"version":3,"sources":["PagerView.tsx"],"names":["React","Platform","UIManager","Keyboard","ReactNative","childrenWithOverriddenStyle","getViewManagerConfig","PagerViewViewManager","PagerView","Component","e","props","onPageScroll","OS","keyboardDismissMode","dismiss","onPageScrollStateChanged","isScrolling","nativeEvent","pageScrollState","onPageSelected","selectedPage","dispatchViewManagerCommand","findNodeHandle","Commands","setPage","setPageWithoutAnimation","scrollEnabled","setScrollEnabled","componentWillUnmount","animationFrameRequestId","undefined","cancelAnimationFrame","componentDidMount","initialPage","requestAnimationFrame","render","Children","count","children","style","_onPageScroll","_onPageScrollStateChanged","_onPageSelected","_onMoveShouldSetResponderCapture"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Platform, UIManager, Keyboard } from 'react-native';\r\nimport ReactNative from 'react-native';\r\nimport type {\r\n  Pageable,\r\n  PagerViewOnPageScrollEvent,\r\n  PagerViewOnPageSelectedEvent,\r\n  PageScrollStateChangedNativeEvent,\r\n  PagerViewProps,\r\n} from './types';\r\n\r\nimport { childrenWithOverriddenStyle } from './utils';\r\nimport { getViewManagerConfig, PagerViewViewManager } from './PagerViewNative';\r\n\r\n/**\r\n * Container that allows to flip left and right between child views. Each\r\n * child view of the `PagerView` will be treated as a separate page\r\n * and will be stretched to fill the `PagerView`.\r\n *\r\n * It is important all children are `<View>`s and not composite components.\r\n * You can set style properties like `padding` or `backgroundColor` for each\r\n * child. It is also important that each child have a `key` prop.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * render: function() {\r\n *   return (\r\n *     <PagerView\r\n *       style={styles.PagerView}\r\n *       initialPage={0}>\r\n *       <View style={styles.pageStyle} key=\"1\">\r\n *         <Text>First page</Text>\r\n *       </View>\r\n *       <View style={styles.pageStyle} key=\"2\">\r\n *         <Text>Second page</Text>\r\n *       </View>\r\n *     </PagerView>\r\n *   );\r\n * }\r\n *\r\n * ...\r\n *\r\n * var styles = {\r\n *   ...\r\n *   PagerView: {\r\n *     flex: 1\r\n *   },\r\n *   pageStyle: {\r\n *     alignItems: 'center',\r\n *     padding: 20,\r\n *   }\r\n * }\r\n * ```\r\n */\r\n\r\nexport class PagerView\r\n  extends React.Component<PagerViewProps>\r\n  implements Pageable {\r\n  private isScrolling = false;\r\n  private animationFrameRequestId?: number;\r\n\r\n  componentWillUnmount() {\r\n    if (this.animationFrameRequestId !== undefined) {\r\n      cancelAnimationFrame(this.animationFrameRequestId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.initialPage !== undefined) {\r\n      this.animationFrameRequestId = requestAnimationFrame(() => {\r\n        if (this.props.initialPage !== undefined) {\r\n          this.setPageWithoutAnimation(this.props.initialPage);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private _onPageScroll = (e: PagerViewOnPageScrollEvent) => {\r\n    if (this.props.onPageScroll) {\r\n      this.props.onPageScroll(e);\r\n    }\r\n    // Not implemented on iOS yet\r\n    if (Platform.OS === 'android') {\r\n      if (this.props.keyboardDismissMode === 'on-drag') {\r\n        Keyboard.dismiss();\r\n      }\r\n    }\r\n  };\r\n\r\n  private _onPageScrollStateChanged = (\r\n    e: PageScrollStateChangedNativeEvent\r\n  ) => {\r\n    if (this.props.onPageScrollStateChanged) {\r\n      this.props.onPageScrollStateChanged(e);\r\n    }\r\n    this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\r\n  };\r\n\r\n  private _onPageSelected = (e: PagerViewOnPageSelectedEvent) => {\r\n    if (this.props.onPageSelected) {\r\n      this.props.onPageSelected(e);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * A helper function to scroll to a specific page in the PagerView.\r\n   * The transition between pages will be animated.\r\n   */\r\n  public setPage = (selectedPage: number) => {\r\n    UIManager.dispatchViewManagerCommand(\r\n      ReactNative.findNodeHandle(this),\r\n      getViewManagerConfig().Commands.setPage,\r\n      [selectedPage]\r\n    );\r\n  };\r\n\r\n  /**\r\n   * A helper function to scroll to a specific page in the PagerView.\r\n   * The transition between pages will *not* be animated.\r\n   */\r\n  public setPageWithoutAnimation = (selectedPage: number) => {\r\n    UIManager.dispatchViewManagerCommand(\r\n      ReactNative.findNodeHandle(this),\r\n      getViewManagerConfig().Commands.setPageWithoutAnimation,\r\n      [selectedPage]\r\n    );\r\n  };\r\n\r\n  /**\r\n   * A helper function to enable/disable scroll imperatively\r\n   * The recommended way is using the scrollEnabled prop, however, there might be a case where a\r\n   * imperative solution is more useful (e.g. for not blocking an animation)\r\n   */\r\n  public setScrollEnabled = (scrollEnabled: boolean) => {\r\n    UIManager.dispatchViewManagerCommand(\r\n      ReactNative.findNodeHandle(this),\r\n      getViewManagerConfig().Commands.setScrollEnabled,\r\n      [scrollEnabled]\r\n    );\r\n  };\r\n\r\n  private _onMoveShouldSetResponderCapture = () => {\r\n    return this.isScrolling;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <PagerViewViewManager\r\n        {...this.props}\r\n        count={React.Children.count(this.props.children)}\r\n        offset={0}\r\n        style={this.props.style}\r\n        onPageScroll={this._onPageScroll}\r\n        onPageScrollStateChanged={this._onPageScrollStateChanged}\r\n        onPageSelected={this._onPageSelected}\r\n        onMoveShouldSetResponderCapture={this._onMoveShouldSetResponderCapture}\r\n        children={childrenWithOverriddenStyle(this.props.children)}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]}