{"version":3,"sources":["PagerView.js"],"names":["React","Platform","UIManager","Keyboard","ReactNative","childrenWithOverriddenStyle","getViewManagerConfig","PagerViewViewManager","PagerView","Component","e","props","onPageScroll","OS","keyboardDismissMode","dismiss","onPageScrollStateChanged","isScrolling","nativeEvent","pageScrollState","onPageSelected","selectedPage","dispatchViewManagerCommand","findNodeHandle","Commands","setPage","setPageWithoutAnimation","scrollEnabled","setScrollEnabled","componentWillUnmount","animationFrameRequestId","undefined","cancelAnimationFrame","componentDidMount","initialPage","requestAnimationFrame","render","createElement","count","Children","children","offset","style","_onPageScroll","_onPageScrollStateChanged","_onPageSelected","onMoveShouldSetResponderCapture","_onMoveShouldSetResponderCapture"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Platform, UIManager, Keyboard } from 'react-native';\nimport ReactNative from 'react-native';\nimport { childrenWithOverriddenStyle } from './utils';\nimport { getViewManagerConfig, PagerViewViewManager } from './PagerViewNative';\n/**\n * Container that allows to flip left and right between child views. Each\n * child view of the `PagerView` will be treated as a separate page\n * and will be stretched to fill the `PagerView`.\n *\n * It is important all children are `<View>`s and not composite components.\n * You can set style properties like `padding` or `backgroundColor` for each\n * child. It is also important that each child have a `key` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <PagerView\n *       style={styles.PagerView}\n *       initialPage={0}>\n *       <View style={styles.pageStyle} key=\"1\">\n *         <Text>First page</Text>\n *       </View>\n *       <View style={styles.pageStyle} key=\"2\">\n *         <Text>Second page</Text>\n *       </View>\n *     </PagerView>\n *   );\n * }\n *\n * ...\n *\n * var styles = {\n *   ...\n *   PagerView: {\n *     flex: 1\n *   },\n *   pageStyle: {\n *     alignItems: 'center',\n *     padding: 20,\n *   }\n * }\n * ```\n */\nexport class PagerView extends React.Component {\n    isScrolling = false;\n    animationFrameRequestId;\n    componentWillUnmount() {\n        if (this.animationFrameRequestId !== undefined) {\n            cancelAnimationFrame(this.animationFrameRequestId);\n        }\n    }\n    componentDidMount() {\n        if (this.props.initialPage !== undefined) {\n            this.animationFrameRequestId = requestAnimationFrame(() => {\n                if (this.props.initialPage !== undefined) {\n                    this.setPageWithoutAnimation(this.props.initialPage);\n                }\n            });\n        }\n    }\n    _onPageScroll = (e) => {\n        if (this.props.onPageScroll) {\n            this.props.onPageScroll(e);\n        }\n        // Not implemented on iOS yet\n        if (Platform.OS === 'android') {\n            if (this.props.keyboardDismissMode === 'on-drag') {\n                Keyboard.dismiss();\n            }\n        }\n    };\n    _onPageScrollStateChanged = (e) => {\n        if (this.props.onPageScrollStateChanged) {\n            this.props.onPageScrollStateChanged(e);\n        }\n        this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n    };\n    _onPageSelected = (e) => {\n        if (this.props.onPageSelected) {\n            this.props.onPageSelected(e);\n        }\n    };\n    /**\n     * A helper function to scroll to a specific page in the PagerView.\n     * The transition between pages will be animated.\n     */\n    setPage = (selectedPage) => {\n        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), getViewManagerConfig().Commands.setPage, [selectedPage]);\n    };\n    /**\n     * A helper function to scroll to a specific page in the PagerView.\n     * The transition between pages will *not* be animated.\n     */\n    setPageWithoutAnimation = (selectedPage) => {\n        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), getViewManagerConfig().Commands.setPageWithoutAnimation, [selectedPage]);\n    };\n    /**\n     * A helper function to enable/disable scroll imperatively\n     * The recommended way is using the scrollEnabled prop, however, there might be a case where a\n     * imperative solution is more useful (e.g. for not blocking an animation)\n     */\n    setScrollEnabled = (scrollEnabled) => {\n        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), getViewManagerConfig().Commands.setScrollEnabled, [scrollEnabled]);\n    };\n    _onMoveShouldSetResponderCapture = () => {\n        return this.isScrolling;\n    };\n    render() {\n        return (React.createElement(PagerViewViewManager, { ...this.props, count: React.Children.count(this.props.children), offset: 0, style: this.props.style, onPageScroll: this._onPageScroll, onPageScrollStateChanged: this._onPageScrollStateChanged, onPageSelected: this._onPageSelected, onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture, children: childrenWithOverriddenStyle(this.props.children) }));\n    }\n}\n"]}