{"version":3,"sources":["LazyPagerView.js"],"names":["React","findNodeHandle","Keyboard","StyleSheet","UIManager","View","getViewManagerConfig","PagerViewViewManager","LazyPagerView","PureComponent","createRef","setPage","page","pagerImplRef","current","setPageWithoutAnimation","setScrollEnabled","scrollEnabled","setScrollLocked","scrollLocked","render","style","implProps","props","createElement","LazyPagerViewImpl","ref","Component","constructor","isScrolling","event","onPageScroll","keyboardDismissMode","dismiss","onPageScrollStateChanged","nativeEvent","pageScrollState","currentPage","position","isNavigatingToPage","requestAnimationFrame","setState","prevState","computeRenderWindow","buffer","maxRenderWindow","offset","windowLength","onPageSelected","initialPage","Math","max","state","componentWillUnmount","animationFrameRequestId","undefined","cancelAnimationFrame","componentDidMount","dispatchViewManagerCommand","Commands","shouldComponentUpdate","nextProps","nextState","stateKeys","stateKey","propKeys","propKey","animated","data","length","maxRenderWindowLowerBound","min","console","warn","floor","renderChildren","keys","children","slice","map","item","index","key","keyExtractor","push","collapsable","styles","pageContainer","renderItem","count","offscreenPageLimit","onMoveShouldSetResponderCapture","orientation","overdrag","overScrollMode","pageMargin","showPageIndicator","nativeView","transitionStyle","create","flex","height","width"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,QAAzB,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,IAA1D,QAAuE,cAAvE;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,mBAA3D;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAN,SAA4BR,KAAK,CAACS,aAAlC,CAAgD;AAAA;AAAA;;AAAA,uDACpCT,KAAK,CAACU,SAAN,EADoC;AAAA;;AAEnDC,EAAAA,OAAO,CAACC,IAAD,EAAO;AAAA;;AACV,kCAAKC,YAAL,CAAkBC,OAAlB,gFAA2BH,OAA3B,CAAmCC,IAAnC,EAAyC,IAAzC;AACH;;AACDG,EAAAA,uBAAuB,CAACH,IAAD,EAAO;AAAA;;AAC1B,mCAAKC,YAAL,CAAkBC,OAAlB,kFAA2BH,OAA3B,CAAmCC,IAAnC,EAAyC,KAAzC;AACH;;AACDI,EAAAA,gBAAgB,CAACC,aAAD,EAAgB;AAAA;;AAC5B,mCAAKJ,YAAL,CAAkBC,OAAlB,kFAA2BE,gBAA3B,CAA4CC,aAA5C;AACH;;AACDC,EAAAA,eAAe,CAACC,YAAD,EAAwB;AAAA;;AACnC,mCAAKN,YAAL,CAAkBC,OAAlB,kFAA2BI,eAA3B,CAA2CC,YAA3C;AACD;;AAEHC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,KAAF;AAAS,SAAGC;AAAZ,QAA0B,KAAKC,KAArC;AACA,wBAAQvB,KAAK,CAACwB,aAAN,CAAoBnB,IAApB,EAA0B;AAAEgB,MAAAA,KAAK,EAAEA;AAAT,KAA1B,eACJrB,KAAK,CAACwB,aAAN,CAAoBC,iBAApB,EAAuC,EAAE,GAAGH,SAAL;AAAgBI,MAAAA,GAAG,EAAE,KAAKb;AAA1B,KAAvC,CADI,CAAR;AAEH;;AAnBkD;;AAqBvD,MAAMY,iBAAN,SAAgCzB,KAAK,CAAC2B,SAAtC,CAAgD;AAI5CC,EAAAA,WAAW,CAACL,KAAD,EAAQ;AAAA;;AACf,UAAMA,KAAN;;AADe,gDAHE,IAGF;;AAAA,yCAFL,KAEK;;AAAA;;AAAA,6DAmHe,MAAM,KAAKM,WAnH1B;;AAAA,0CAoHHC,KAAD,IAAW;AAAA;;AACtB,mDAAKP,KAAL,EAAWQ,YAAX,kGAA0BD,KAA1B;;AACA,UAAI,KAAKP,KAAL,CAAWS,mBAAX,KAAmC,SAAvC,EAAkD;AAC9C9B,QAAAA,QAAQ,CAAC+B,OAAT;AACH;AACJ,KAzHkB;;AAAA,sDA0HSH,KAAD,IAAW;AAAA;;AAClC,qDAAKP,KAAL,EAAWW,wBAAX,qGAAsCJ,KAAtC;AACA,WAAKD,WAAL,GAAmBC,KAAK,CAACK,WAAN,CAAkBC,eAAlB,KAAsC,UAAzD;AACH,KA7HkB;;AAAA,4CA8HDN,KAAD,IAAW;AAAA;;AACxB,YAAMO,WAAW,GAAGP,KAAK,CAACK,WAAN,CAAkBG,QAAtC,CADwB,CAExB;AACA;;AACA,UAAI,KAAKC,kBAAL,IAA2B,IAA/B,EAAqC;AACjC,YAAI,KAAKA,kBAAL,KAA4BF,WAAhC,EAA6C;AACzC,eAAKE,kBAAL,GAA0B,IAA1B;AACH,SAFD,MAGK;AACD;AACA;AACH;AACJ,OAZuB,CAaxB;;;AACAC,MAAAA,qBAAqB,CAAC,MAAM;AACxB,aAAKC,QAAL,CAAeC,SAAD,IAAe,KAAKC,mBAAL,CAAyB;AAClDC,UAAAA,MAAM,EAAE,KAAKrB,KAAL,CAAWqB,MAD+B;AAElDP,UAAAA,WAFkD;AAGlDQ,UAAAA,eAAe,EAAE,KAAKtB,KAAL,CAAWsB,eAHsB;AAIlDC,UAAAA,MAAM,EAAEJ,SAAS,CAACI,MAJgC;AAKlDC,UAAAA,YAAY,EAAEL,SAAS,CAACK;AAL0B,SAAzB,CAA7B;AAOH,OARoB,CAArB;AASA,oDAAKxB,KAAL,EAAWyB,cAAX,mGAA4BlB,KAA5B;AACH,KAtJkB;;AAEf,UAAMmB,WAAW,GAAGC,IAAI,CAACC,GAAL,0BAAS,KAAK5B,KAAL,CAAW0B,WAApB,yEAAmC,CAAnC,EAAsC,CAAtC,CAApB;AACA,SAAKG,KAAL,GAAa,KAAKT,mBAAL,CAAyB;AAClCC,MAAAA,MAAM,EAAErB,KAAK,CAACqB,MADoB;AAElCP,MAAAA,WAAW,EAAEY,WAFqB;AAGlCJ,MAAAA,eAAe,EAAEtB,KAAK,CAACsB,eAHW;AAIlCC,MAAAA,MAAM,EAAEG,WAJ0B;AAKlCF,MAAAA,YAAY,EAAE;AALoB,KAAzB,CAAb;AAOH;;AACDM,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKC,uBAAL,KAAiCC,SAArC,EAAgD;AAC5CC,MAAAA,oBAAoB,CAAC,KAAKF,uBAAN,CAApB;AACH;AACJ;;AACDG,EAAAA,iBAAiB,GAAG;AAChB,UAAMR,WAAW,GAAG,KAAK1B,KAAL,CAAW0B,WAA/B;;AACA,QAAIA,WAAW,IAAI,IAAf,IAAuBA,WAAW,GAAG,CAAzC,EAA4C;AACxC,WAAKV,kBAAL,GAA0BU,WAA1B;AACA,WAAKK,uBAAL,GAA+Bd,qBAAqB,CAAC,MAAM;AACvD;AACApC,QAAAA,SAAS,CAACsD,0BAAV,CAAqCzD,cAAc,CAAC,IAAD,CAAnD,EAA2DK,oBAAoB,GAAGqD,QAAvB,CAAgC5C,uBAA3F,EAAoH,CAACkC,WAAD,CAApH;AACH,OAHmD,CAApD;AAIH;AACJ;;AACDW,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,UAAMC,SAAS,GAAG,CACd,QADc,EAEd,cAFc,CAAlB;;AAIA,SAAK,MAAMC,QAAX,IAAuBD,SAAvB,EAAkC;AAC9B,UAAI,KAAKX,KAAL,CAAWY,QAAX,MAAyBF,SAAS,CAACE,QAAD,CAAtC,EAAkD;AAC9C,eAAO,IAAP;AACH;AACJ;;AACD,UAAMC,QAAQ,GAAG,CACb,MADa,EAEb,cAFa,EAGb,oBAHa,EAIb,aAJa,EAKb,UALa,EAMb,gBANa,EAOb,YAPa,EAQb,YARa,EASb,eATa,EAUb,mBAVa,EAWb,iBAXa,CAAjB;;AAaA,SAAK,MAAMC,OAAX,IAAsBD,QAAtB,EAAgC;AAC5B,UAAI,KAAK1C,KAAL,CAAW2C,OAAX,MAAwBL,SAAS,CAACK,OAAD,CAArC,EAAgD;AAC5C,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH;AACD;AACJ;AACA;;;AACIvD,EAAAA,OAAO,CAACC,IAAD,EAAOuD,QAAP,EAAiB;AACpB,QAAIvD,IAAI,GAAG,CAAP,IAAYA,IAAI,IAAI,KAAKW,KAAL,CAAW6C,IAAX,CAAgBC,MAAxC,EAAgD;AAC5C;AACH,KAHmB,CAIpB;;;AACA,SAAK5B,QAAL,CAAeC,SAAD,IAAe,KAAKC,mBAAL,CAAyB;AAClDC,MAAAA,MAAM,EAAE,KAAKrB,KAAL,CAAWqB,MAD+B;AAElDP,MAAAA,WAAW,EAAEzB,IAFqC;AAGlDiC,MAAAA,eAAe,EAAE,KAAKtB,KAAL,CAAWsB,eAHsB;AAIlDC,MAAAA,MAAM,EAAEJ,SAAS,CAACI,MAJgC;AAKlDC,MAAAA,YAAY,EAAEL,SAAS,CAACK;AAL0B,KAAzB,CAA7B,EALoB,CAYpB;;AACAP,IAAAA,qBAAqB,CAAC,MAAM;AACxBpC,MAAAA,SAAS,CAACsD,0BAAV,CAAqCzD,cAAc,CAAC,IAAD,CAAnD,EAA2DkE,QAAQ,GAC7D7D,oBAAoB,GAAGqD,QAAvB,CAAgChD,OAD6B,GAE7DL,oBAAoB,GAAGqD,QAAvB,CAAgC5C,uBAFtC,EAE+D,CAACH,IAAD,CAF/D;AAGH,KAJoB,CAArB;AAKH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,gBAAgB,CAACC,aAAD,EAAgB;AAC5Bb,IAAAA,SAAS,CAACsD,0BAAV,CAAqCzD,cAAc,CAAC,IAAD,CAAnD,EAA2DK,oBAAoB,GAAGqD,QAAvB,CAAgC3C,gBAA3F,EAA6G,CAACC,aAAD,CAA7G;AACH;;AACDC,EAAAA,eAAe,CAACC,YAAD,EAAe;AAC1Bf,IAAAA,SAAS,CAACsD,0BAAV,CAAqCzD,cAAc,CAAC,IAAD,CAAnD,EAA2DK,oBAAoB,GAAGqD,QAAvB,CAAgCzC,eAA3F,EAA4G,CAACC,YAAD,CAA5G;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIwB,EAAAA,mBAAmB,CAACyB,IAAD,EAAO;AAAA;;AACtB,UAAMxB,MAAM,GAAGM,IAAI,CAACC,GAAL,iBAASiB,IAAI,CAACxB,MAAd,uDAAwB,CAAxB,EAA2B,CAA3B,CAAf;AACA,UAAM0B,yBAAyB,GAAG,IAAI,IAAI1B,MAA1C;AACA,QAAIE,MAAM,GAAGI,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqB,GAAL,CAASH,IAAI,CAACtB,MAAd,EAAsBsB,IAAI,CAAC/B,WAAL,GAAmBO,MAAzC,CAAT,EAA2D,CAA3D,CAAb;AACA,QAAIG,YAAY,GAAGG,IAAI,CAACC,GAAL,CAASiB,IAAI,CAACtB,MAAL,GAAcsB,IAAI,CAACrB,YAA5B,EAA0CqB,IAAI,CAAC/B,WAAL,GAAmBO,MAAnB,GAA4B,CAAtE,IACfE,MADJ;AAEA,QAAID,eAAe,4BAAGuB,IAAI,CAACvB,eAAR,yEAA2B,CAA9C;;AACA,QAAIA,eAAe,KAAK,CAAxB,EAA2B;AACvB,UAAIA,eAAe,GAAGyB,yBAAtB,EAAiD;AAC7CE,QAAAA,OAAO,CAACC,IAAR,CAAc,4CAA2CH,yBAA0B,EAAnF;AACAzB,QAAAA,eAAe,GAAGyB,yBAAlB;AACH;;AACD,UAAIvB,YAAY,GAAGF,eAAnB,EAAoC;AAChCC,QAAAA,MAAM,GAAGsB,IAAI,CAAC/B,WAAL,GAAmBa,IAAI,CAACwB,KAAL,CAAW7B,eAAe,GAAG,CAA7B,CAA5B;AACAE,QAAAA,YAAY,GAAGF,eAAf;AACH;AACJ;;AACD,WAAO;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAP;AACH;;AAqCD4B,EAAAA,cAAc,CAAC7B,MAAD,EAASC,YAAT,EAAuB;AACjC,UAAM6B,IAAI,GAAG,EAAb;AACA,WAAO;AACHC,MAAAA,QAAQ,EAAE,KAAKtD,KAAL,CAAW6C,IAAX,CACLU,KADK,CACChC,MADD,EACSA,MAAM,GAAGC,YADlB,EAELgC,GAFK,CAED,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtB,cAAMC,GAAG,GAAG,KAAK3D,KAAL,CAAW4D,YAAX,CAAwBH,IAAxB,EAA8BlC,MAAM,GAAGmC,KAAvC,CAAZ;AACAL,QAAAA,IAAI,CAACQ,IAAL,CAAUF,GAAV;AACA,4BAAQlF,KAAK,CAACwB,aAAN,CAAoBnB,IAApB,EAA0B;AAAEgF,UAAAA,WAAW,EAAE,KAAf;AAAsBH,UAAAA,GAAG,EAAEA,GAA3B;AAAgC7D,UAAAA,KAAK,EAAEiE,MAAM,CAACC;AAA9C,SAA1B,EAAyF,KAAKhE,KAAL,CAAWiE,UAAX,CAAsB;AAAER,UAAAA,IAAF;AAAQC,UAAAA,KAAK,EAAEnC,MAAM,GAAGmC;AAAxB,SAAtB,CAAzF,CAAR;AACH,OANS,CADP;AAQHL,MAAAA;AARG,KAAP;AAUH;;AACDxD,EAAAA,MAAM,GAAG;AACL,UAAM;AAAE0B,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAA2B,KAAKK,KAAtC;AACA,UAAM;AAAEyB,MAAAA;AAAF,QAAe,KAAKF,cAAL,CAAoB7B,MAApB,EAA4BC,YAA5B,CAArB;AACA,wBAAQ/C,KAAK,CAACwB,aAAN,CAAoBjB,oBAApB,EAA0C;AAAEkF,MAAAA,KAAK,EAAE,KAAKlE,KAAL,CAAW6C,IAAX,CAAgBC,MAAzB;AAAiCqB,MAAAA,kBAAkB,EAAE,KAAKnE,KAAL,CAAWmE,kBAAhE;AAAoF5C,MAAAA,MAAM,EAAEA,MAA5F;AAAoG6C,MAAAA,+BAA+B,EAAE,KAAKA,+BAA1I;AAA2K5D,MAAAA,YAAY,EAAE,KAAKA,YAA9L;AAA4MG,MAAAA,wBAAwB,EAAE,KAAKA,wBAA3O;AAAqQc,MAAAA,cAAc,EAAE,KAAKA,cAA1R;AAA0S4C,MAAAA,WAAW,EAAE,KAAKrE,KAAL,CAAWqE,WAAlU;AAA+UC,MAAAA,QAAQ,EAAE,KAAKtE,KAAL,CAAWsE,QAApW;AAA8WC,MAAAA,cAAc,EAAE,KAAKvE,KAAL,CAAWuE,cAAzY;AAAyZC,MAAAA,UAAU,EAAE,KAAKxE,KAAL,CAAWwE,UAAhb;AAA4b9E,MAAAA,aAAa,EAAE,KAAKM,KAAL,CAAWN,aAAtd;AAAqe+E,MAAAA,iBAAiB,EAAE,KAAKzE,KAAL,CAAWyE,iBAAngB;AAAshB3E,MAAAA,KAAK,EAAEiE,MAAM,CAACW,UAApiB;AAAgjBC,MAAAA,eAAe,EAAE,KAAK3E,KAAL,CAAW2E;AAA5kB,KAA1C,EAAyoBrB,QAAzoB,CAAR;AACH;;AA5K2C;;AA8KhD,MAAMS,MAAM,GAAGnF,UAAU,CAACgG,MAAX,CAAkB;AAC7BF,EAAAA,UAAU,EAAE;AAAEG,IAAAA,IAAI,EAAE;AAAR,GADiB;AAE7Bb,EAAAA,aAAa,EAAE;AAAEc,IAAAA,MAAM,EAAE,MAAV;AAAkB/D,IAAAA,QAAQ,EAAE,UAA5B;AAAwCgE,IAAAA,KAAK,EAAE;AAA/C;AAFc,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { findNodeHandle, Keyboard, StyleSheet, UIManager, View, } from 'react-native';\nimport { getViewManagerConfig, PagerViewViewManager } from './PagerViewNative';\n/**\n * PagerView implementation that renders pages when needed (lazy loading)\n */\nexport class LazyPagerView extends React.PureComponent {\n    pagerImplRef = React.createRef();\n    setPage(page) {\n        this.pagerImplRef.current?.setPage(page, true);\n    }\n    setPageWithoutAnimation(page) {\n        this.pagerImplRef.current?.setPage(page, false);\n    }\n    setScrollEnabled(scrollEnabled) {\n        this.pagerImplRef.current?.setScrollEnabled(scrollEnabled);\n    }\n    setScrollLocked(scrollLocked: boolean) {\n        this.pagerImplRef.current?.setScrollLocked(scrollLocked);\n      }\n    \n    render() {\n        const { style, ...implProps } = this.props;\n        return (React.createElement(View, { style: style },\n            React.createElement(LazyPagerViewImpl, { ...implProps, ref: this.pagerImplRef })));\n    }\n}\nclass LazyPagerViewImpl extends React.Component {\n    isNavigatingToPage = null;\n    isScrolling = false;\n    animationFrameRequestId;\n    constructor(props) {\n        super(props);\n        const initialPage = Math.max(this.props.initialPage ?? 0, 0);\n        this.state = this.computeRenderWindow({\n            buffer: props.buffer,\n            currentPage: initialPage,\n            maxRenderWindow: props.maxRenderWindow,\n            offset: initialPage,\n            windowLength: 0,\n        });\n    }\n    componentWillUnmount() {\n        if (this.animationFrameRequestId !== undefined) {\n            cancelAnimationFrame(this.animationFrameRequestId);\n        }\n    }\n    componentDidMount() {\n        const initialPage = this.props.initialPage;\n        if (initialPage != null && initialPage > 0) {\n            this.isNavigatingToPage = initialPage;\n            this.animationFrameRequestId = requestAnimationFrame(() => {\n                // Send command directly; render window already contains destination.\n                UIManager.dispatchViewManagerCommand(findNodeHandle(this), getViewManagerConfig().Commands.setPageWithoutAnimation, [initialPage]);\n            });\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        const stateKeys = [\n            'offset',\n            'windowLength',\n        ];\n        for (const stateKey of stateKeys) {\n            if (this.state[stateKey] !== nextState[stateKey]) {\n                return true;\n            }\n        }\n        const propKeys = [\n            'data',\n            'keyExtractor',\n            'offscreenPageLimit',\n            'orientation',\n            'overdrag',\n            'overScrollMode',\n            'pageMargin',\n            'renderItem',\n            'scrollEnabled',\n            'showPageIndicator',\n            'transitionStyle',\n        ];\n        for (const propKey of propKeys) {\n            if (this.props[propKey] !== nextProps[propKey]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * A helper function to scroll to a specific page in the PagerView.\n     */\n    setPage(page, animated) {\n        if (page < 0 || page >= this.props.data.length) {\n            return;\n        }\n        // Start rendering the destination.\n        this.setState((prevState) => this.computeRenderWindow({\n            buffer: this.props.buffer,\n            currentPage: page,\n            maxRenderWindow: this.props.maxRenderWindow,\n            offset: prevState.offset,\n            windowLength: prevState.windowLength,\n        }));\n        // Send paging command.\n        requestAnimationFrame(() => {\n            UIManager.dispatchViewManagerCommand(findNodeHandle(this), animated\n                ? getViewManagerConfig().Commands.setPage\n                : getViewManagerConfig().Commands.setPageWithoutAnimation, [page]);\n        });\n    }\n    /**\n     * A helper function to enable/disable scroll imperatively.\n     * The recommended way is using the scrollEnabled prop, however, there might\n     * be a case where an imperative solution is more useful (e.g. for not\n     * blocking an animation)\n     */\n    setScrollEnabled(scrollEnabled) {\n        UIManager.dispatchViewManagerCommand(findNodeHandle(this), getViewManagerConfig().Commands.setScrollEnabled, [scrollEnabled]);\n    }\n    setScrollLocked(scrollLocked) {\n        UIManager.dispatchViewManagerCommand(findNodeHandle(this), getViewManagerConfig().Commands.setScrollLocked, [scrollLocked]);\n    }\n    /**\n     * Compute desired render window size.\n     *\n     * Returns `offset` and `windowLength` unmodified, unless in conflict with\n     * restrictions from `buffer` or `maxRenderWindow`.\n     */\n    computeRenderWindow(data) {\n        const buffer = Math.max(data.buffer ?? 1, 1);\n        const maxRenderWindowLowerBound = 1 + 2 * buffer;\n        let offset = Math.max(Math.min(data.offset, data.currentPage - buffer), 0);\n        let windowLength = Math.max(data.offset + data.windowLength, data.currentPage + buffer + 1) -\n            offset;\n        let maxRenderWindow = data.maxRenderWindow ?? 0;\n        if (maxRenderWindow !== 0) {\n            if (maxRenderWindow < maxRenderWindowLowerBound) {\n                console.warn(`maxRenderWindow too small. Increasing to ${maxRenderWindowLowerBound}`);\n                maxRenderWindow = maxRenderWindowLowerBound;\n            }\n            if (windowLength > maxRenderWindow) {\n                offset = data.currentPage - Math.floor(maxRenderWindow / 2);\n                windowLength = maxRenderWindow;\n            }\n        }\n        return { offset, windowLength };\n    }\n    onMoveShouldSetResponderCapture = () => this.isScrolling;\n    onPageScroll = (event) => {\n        this.props.onPageScroll?.(event);\n        if (this.props.keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n        }\n    };\n    onPageScrollStateChanged = (event) => {\n        this.props.onPageScrollStateChanged?.(event);\n        this.isScrolling = event.nativeEvent.pageScrollState === 'dragging';\n    };\n    onPageSelected = (event) => {\n        const currentPage = event.nativeEvent.position;\n        // Ignore spurious events that can occur on mount with `initialPage`.\n        // TODO: Is there a way to avoid triggering the events at all?\n        if (this.isNavigatingToPage != null) {\n            if (this.isNavigatingToPage === currentPage) {\n                this.isNavigatingToPage = null;\n            }\n            else {\n                // Ignore event.\n                return;\n            }\n        }\n        // Queue renders for next needed pages (if not already available).\n        requestAnimationFrame(() => {\n            this.setState((prevState) => this.computeRenderWindow({\n                buffer: this.props.buffer,\n                currentPage,\n                maxRenderWindow: this.props.maxRenderWindow,\n                offset: prevState.offset,\n                windowLength: prevState.windowLength,\n            }));\n        });\n        this.props.onPageSelected?.(event);\n    };\n    renderChildren(offset, windowLength) {\n        const keys = [];\n        return {\n            children: this.props.data\n                .slice(offset, offset + windowLength)\n                .map((item, index) => {\n                const key = this.props.keyExtractor(item, offset + index);\n                keys.push(key);\n                return (React.createElement(View, { collapsable: false, key: key, style: styles.pageContainer }, this.props.renderItem({ item, index: offset + index })));\n            }),\n            keys,\n        };\n    }\n    render() {\n        const { offset, windowLength } = this.state;\n        const { children } = this.renderChildren(offset, windowLength);\n        return (React.createElement(PagerViewViewManager, { count: this.props.data.length, offscreenPageLimit: this.props.offscreenPageLimit, offset: offset, onMoveShouldSetResponderCapture: this.onMoveShouldSetResponderCapture, onPageScroll: this.onPageScroll, onPageScrollStateChanged: this.onPageScrollStateChanged, onPageSelected: this.onPageSelected, orientation: this.props.orientation, overdrag: this.props.overdrag, overScrollMode: this.props.overScrollMode, pageMargin: this.props.pageMargin, scrollEnabled: this.props.scrollEnabled, showPageIndicator: this.props.showPageIndicator, style: styles.nativeView, transitionStyle: this.props.transitionStyle }, children));\n    }\n}\nconst styles = StyleSheet.create({\n    nativeView: { flex: 1 },\n    pageContainer: { height: '100%', position: 'absolute', width: '100%' },\n});\n"]}