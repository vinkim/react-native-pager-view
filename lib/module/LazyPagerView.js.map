{"version":3,"sources":["LazyPagerView.tsx"],"names":["React","findNodeHandle","Keyboard","StyleSheet","UIManager","View","getViewManagerConfig","PagerViewViewManager","LazyPagerView","PureComponent","createRef","setPage","page","pagerImplRef","current","setPageWithoutAnimation","setScrollEnabled","scrollEnabled","setScrollLocked","scrollLocked","render","style","implProps","props","LazyPagerViewImpl","Component","constructor","isScrolling","event","onPageScroll","keyboardDismissMode","dismiss","onPageScrollStateChanged","nativeEvent","pageScrollState","currentPage","position","isNavigatingToPage","requestAnimationFrame","setState","prevState","computeRenderWindow","buffer","maxRenderWindow","offset","windowLength","onPageSelected","initialPage","Math","max","state","componentWillUnmount","animationFrameRequestId","undefined","cancelAnimationFrame","componentDidMount","dispatchViewManagerCommand","Commands","shouldComponentUpdate","nextProps","nextState","stateKeys","stateKey","propKeys","propKey","animated","data","length","maxRenderWindowLowerBound","min","console","warn","floor","renderChildren","keys","children","slice","map","item","index","key","keyExtractor","push","styles","pageContainer","renderItem","offscreenPageLimit","onMoveShouldSetResponderCapture","orientation","overdrag","overScrollMode","pageMargin","showPageIndicator","nativeView","transitionStyle","create","flex","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  findNodeHandle,\r\n  Keyboard,\r\n  StyleSheet,\r\n  UIManager,\r\n  View,\r\n} from 'react-native';\r\n\r\nimport { getViewManagerConfig, PagerViewViewManager } from './PagerViewNative';\r\nimport type {\r\n  LazyPagerViewProps,\r\n  Pageable,\r\n  PagerViewOnPageScrollEvent,\r\n  PagerViewOnPageSelectedEvent,\r\n  PageScrollStateChangedNativeEvent,\r\n} from './types';\r\n\r\ntype LazyPagerViewImplProps<ItemT> = Omit<LazyPagerViewProps<ItemT>, 'style'>;\r\ntype LazyPagerViewImplState = { offset: number; windowLength: number };\r\n\r\ntype RenderWindowData = {\r\n  buffer: number | undefined;\r\n  currentPage: number;\r\n  maxRenderWindow: number | undefined;\r\n  offset: number;\r\n  windowLength: number;\r\n};\r\n\r\n/**\r\n * PagerView implementation that renders pages when needed (lazy loading)\r\n */\r\nexport class LazyPagerView<ItemT>\r\n  extends React.PureComponent<LazyPagerViewProps<ItemT>>\r\n  implements Pageable {\r\n  private pagerImplRef = React.createRef<LazyPagerViewImpl<ItemT>>();\r\n\r\n  setPage(page: number): void {\r\n    this.pagerImplRef.current?.setPage(page, true);\r\n  }\r\n\r\n  setPageWithoutAnimation(page: number): void {\r\n    this.pagerImplRef.current?.setPage(page, false);\r\n  }\r\n\r\n  setScrollEnabled(scrollEnabled: boolean): void {\r\n    this.pagerImplRef.current?.setScrollEnabled(scrollEnabled);\r\n  }\r\n\r\n  setScrollLocked(scrollLocked: boolean) {\r\n    this.pagerImplRef.current?.setScrollLocked(scrollLocked);\r\n  }\r\n\r\n  render() {\r\n    const { style, ...implProps } = this.props;\r\n\r\n    return (\r\n      <View style={style}>\r\n        <LazyPagerViewImpl {...implProps} ref={this.pagerImplRef} />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nclass LazyPagerViewImpl<ItemT> extends React.Component<\r\n  LazyPagerViewImplProps<ItemT>,\r\n  LazyPagerViewImplState\r\n> {\r\n  private isNavigatingToPage: number | null = null;\r\n  private isScrolling = false;\r\n  private animationFrameRequestId?: number;\r\n\r\n  constructor(props: LazyPagerViewImplProps<ItemT>) {\r\n    super(props);\r\n    const initialPage = Math.max(this.props.initialPage ?? 0, 0);\r\n    this.state = this.computeRenderWindow({\r\n      buffer: props.buffer,\r\n      currentPage: initialPage,\r\n      maxRenderWindow: props.maxRenderWindow,\r\n      offset: initialPage,\r\n      windowLength: 0,\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.animationFrameRequestId !== undefined) {\r\n      cancelAnimationFrame(this.animationFrameRequestId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const initialPage = this.props.initialPage;\r\n    if (initialPage != null && initialPage > 0) {\r\n      this.isNavigatingToPage = initialPage;\r\n      this.animationFrameRequestId = requestAnimationFrame(() => {\r\n        // Send command directly; render window already contains destination.\r\n        UIManager.dispatchViewManagerCommand(\r\n          findNodeHandle(this),\r\n          getViewManagerConfig().Commands.setPageWithoutAnimation,\r\n          [initialPage]\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(\r\n    nextProps: LazyPagerViewImplProps<ItemT>,\r\n    nextState: LazyPagerViewImplState\r\n  ) {\r\n    const stateKeys: (keyof LazyPagerViewImplState)[] = [\r\n      'offset',\r\n      'windowLength',\r\n    ];\r\n    for (const stateKey of stateKeys) {\r\n      if (this.state[stateKey] !== nextState[stateKey]) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    const propKeys: (keyof LazyPagerViewImplProps<ItemT>)[] = [\r\n      'data',\r\n      'keyExtractor',\r\n      'offscreenPageLimit',\r\n      'orientation',\r\n      'overdrag',\r\n      'overScrollMode',\r\n      'pageMargin',\r\n      'renderItem',\r\n      'scrollEnabled',\r\n      'showPageIndicator',\r\n      'transitionStyle',\r\n    ];\r\n    for (const propKey of propKeys) {\r\n      if (this.props[propKey] !== nextProps[propKey]) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * A helper function to scroll to a specific page in the PagerView.\r\n   */\r\n  setPage(page: number, animated: boolean) {\r\n    if (page < 0 || page >= this.props.data.length) {\r\n      return;\r\n    }\r\n\r\n    // Start rendering the destination.\r\n    this.setState((prevState) =>\r\n      this.computeRenderWindow({\r\n        buffer: this.props.buffer,\r\n        currentPage: page,\r\n        maxRenderWindow: this.props.maxRenderWindow,\r\n        offset: prevState.offset,\r\n        windowLength: prevState.windowLength,\r\n      })\r\n    );\r\n    // Send paging command.\r\n    requestAnimationFrame(() => {\r\n      UIManager.dispatchViewManagerCommand(\r\n        findNodeHandle(this),\r\n        animated\r\n          ? getViewManagerConfig().Commands.setPage\r\n          : getViewManagerConfig().Commands.setPageWithoutAnimation,\r\n        [page]\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A helper function to enable/disable scroll imperatively.\r\n   * The recommended way is using the scrollEnabled prop, however, there might\r\n   * be a case where an imperative solution is more useful (e.g. for not\r\n   * blocking an animation)\r\n   */\r\n  setScrollEnabled(scrollEnabled: boolean) {\r\n    UIManager.dispatchViewManagerCommand(\r\n      findNodeHandle(this),\r\n      getViewManagerConfig().Commands.setScrollEnabled,\r\n      [scrollEnabled]\r\n    );\r\n  }\r\n\r\n  setScrollLocked(scrollLocked: boolean) {\r\n    UIManager.dispatchViewManagerCommand(\r\n      findNodeHandle(this),\r\n      getViewManagerConfig().Commands.setScrollLocked,\r\n      [scrollLocked]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compute desired render window size.\r\n   *\r\n   * Returns `offset` and `windowLength` unmodified, unless in conflict with\r\n   * restrictions from `buffer` or `maxRenderWindow`.\r\n   */\r\n  private computeRenderWindow(data: RenderWindowData): LazyPagerViewImplState {\r\n    const buffer = Math.max(data.buffer ?? 1, 1);\r\n    const maxRenderWindowLowerBound = 1 + 2 * buffer;\r\n    let offset = Math.max(Math.min(data.offset, data.currentPage - buffer), 0);\r\n    let windowLength =\r\n      Math.max(data.offset + data.windowLength, data.currentPage + buffer + 1) -\r\n      offset;\r\n\r\n    let maxRenderWindow = data.maxRenderWindow ?? 0;\r\n    if (maxRenderWindow !== 0) {\r\n      if (maxRenderWindow < maxRenderWindowLowerBound) {\r\n        console.warn(\r\n          `maxRenderWindow too small. Increasing to ${maxRenderWindowLowerBound}`\r\n        );\r\n        maxRenderWindow = maxRenderWindowLowerBound;\r\n      }\r\n      if (windowLength > maxRenderWindow) {\r\n        offset = data.currentPage - Math.floor(maxRenderWindow / 2);\r\n        windowLength = maxRenderWindow;\r\n      }\r\n    }\r\n\r\n    return { offset, windowLength };\r\n  }\r\n\r\n  private onMoveShouldSetResponderCapture = () => this.isScrolling;\r\n\r\n  private onPageScroll = (event: PagerViewOnPageScrollEvent) => {\r\n    this.props.onPageScroll?.(event);\r\n    if (this.props.keyboardDismissMode === 'on-drag') {\r\n      Keyboard.dismiss();\r\n    }\r\n  };\r\n\r\n  private onPageScrollStateChanged = (\r\n    event: PageScrollStateChangedNativeEvent\r\n  ) => {\r\n    this.props.onPageScrollStateChanged?.(event);\r\n    this.isScrolling = event.nativeEvent.pageScrollState === 'dragging';\r\n  };\r\n\r\n  private onPageSelected = (event: PagerViewOnPageSelectedEvent) => {\r\n    const currentPage = event.nativeEvent.position;\r\n\r\n    // Ignore spurious events that can occur on mount with `initialPage`.\r\n    // TODO: Is there a way to avoid triggering the events at all?\r\n    if (this.isNavigatingToPage != null) {\r\n      if (this.isNavigatingToPage === currentPage) {\r\n        this.isNavigatingToPage = null;\r\n      } else {\r\n        // Ignore event.\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Queue renders for next needed pages (if not already available).\r\n    requestAnimationFrame(() => {\r\n      this.setState((prevState) =>\r\n        this.computeRenderWindow({\r\n          buffer: this.props.buffer,\r\n          currentPage,\r\n          maxRenderWindow: this.props.maxRenderWindow,\r\n          offset: prevState.offset,\r\n          windowLength: prevState.windowLength,\r\n        })\r\n      );\r\n    });\r\n\r\n    this.props.onPageSelected?.(event);\r\n  };\r\n\r\n  private renderChildren(offset: number, windowLength: number) {\r\n    const keys: string[] = [];\r\n    return {\r\n      children: this.props.data\r\n        .slice(offset, offset + windowLength)\r\n        .map((item, index) => {\r\n          const key = this.props.keyExtractor(item, offset + index);\r\n          keys.push(key);\r\n          return (\r\n            <View collapsable={false} key={key} style={styles.pageContainer}>\r\n              {this.props.renderItem({ item, index: offset + index })}\r\n            </View>\r\n          );\r\n        }),\r\n      keys,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { offset, windowLength } = this.state;\r\n    const { children } = this.renderChildren(offset, windowLength);\r\n\r\n    return (\r\n      <PagerViewViewManager\r\n        count={this.props.data.length}\r\n        offscreenPageLimit={this.props.offscreenPageLimit}\r\n        offset={offset}\r\n        onMoveShouldSetResponderCapture={this.onMoveShouldSetResponderCapture}\r\n        onPageScroll={this.onPageScroll}\r\n        onPageScrollStateChanged={this.onPageScrollStateChanged}\r\n        onPageSelected={this.onPageSelected}\r\n        orientation={this.props.orientation}\r\n        overdrag={this.props.overdrag}\r\n        overScrollMode={this.props.overScrollMode}\r\n        pageMargin={this.props.pageMargin}\r\n        scrollEnabled={this.props.scrollEnabled}\r\n        showPageIndicator={this.props.showPageIndicator}\r\n        style={styles.nativeView}\r\n        transitionStyle={this.props.transitionStyle}\r\n      >\r\n        {children}\r\n      </PagerViewViewManager>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  nativeView: { flex: 1 },\r\n  pageContainer: { height: '100%', position: 'absolute', width: '100%' },\r\n});\r\n"]}