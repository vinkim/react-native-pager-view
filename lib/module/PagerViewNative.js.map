{"version":3,"sources":["PagerViewNative.tsx"],"names":["requireNativeComponent","UIManager","VIEW_MANAGER_NAME","PagerViewViewManager","getViewManagerConfig","viewManagerName"],"mappings":"AAAA,SAASA,sBAAT,EAAiCC,SAAjC,QAAkD,cAAlD;AAWA,MAAMC,iBAAiB,GAAG,cAA1B;AAwCA,OAAO,MAAMC,oBAAoB,GAAGH,sBAAsB,CACxDE,iBADwD,CAAnD;AAIP,OAAO,SAASE,oBAAT,GAAmE;AAAA,MAArCC,eAAqC,uEAAnBH,iBAAmB;AACxE,SAAOD,SAAS,CAACG,oBAAV,CAA+BC,eAA/B,CAAP;AACD","sourcesContent":["import { requireNativeComponent, UIManager } from 'react-native';\nimport type { GestureResponderEvent, StyleProp, ViewStyle } from 'react-native';\nimport type {\n  Orientation,\n  OverScrollMode,\n  PagerViewOnPageScrollEvent,\n  PagerViewOnPageSelectedEvent,\n  PageScrollStateChangedNativeEvent,\n  TransitionStyle,\n} from './types';\n\nconst VIEW_MANAGER_NAME = 'RNCViewPager';\n\ntype PagerViewNativeProps = {\n  /**\n   * Total number of pages. When lazy rendering, number of rendered react\n   * children elements will be smaller.\n   */\n  count: number;\n  offscreenPageLimit?: number;\n\n  /**\n   * Page position offset of the first rendered react child. I.e., the first\n   * `offset` number of pages are not currently rendered on JS-side (so native\n   * code should act accordingly).\n   */\n  offset: number;\n\n  /**\n   * If a parent `View` wants to prevent a child `View` from becoming responder\n   * on a move, it should have this handler which returns `true`.\n   *\n   * `View.props.onMoveShouldSetResponderCapture: (event) => [true | false]`,\n   * where `event` is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onMoveShouldsetrespondercapture\n   */\n  onMoveShouldSetResponderCapture: (event: GestureResponderEvent) => boolean;\n  onPageScroll: (event: PagerViewOnPageScrollEvent) => void;\n  onPageScrollStateChanged: (event: PageScrollStateChangedNativeEvent) => void;\n  onPageSelected: (event: PagerViewOnPageSelectedEvent) => void;\n  orientation?: Orientation;\n  overdrag?: boolean;\n  overScrollMode?: OverScrollMode;\n  pageMargin?: number;\n  scrollEnabled?: boolean;\n  showPageIndicator?: boolean;\n  style: StyleProp<ViewStyle>;\n  transitionStyle?: TransitionStyle;\n};\n\nexport const PagerViewViewManager = requireNativeComponent<PagerViewNativeProps>(\n  VIEW_MANAGER_NAME\n);\n\nexport function getViewManagerConfig(viewManagerName = VIEW_MANAGER_NAME) {\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\n"]}